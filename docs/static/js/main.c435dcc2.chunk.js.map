{"version":3,"sources":["components/FeedPreview.tsx","App.tsx","serviceWorker.ts","constants/theme.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","width","marginTop","spacing","flexCenter","height","display","alignItems","justifyContent","error","flexDirection","feedItem","margin","marginBottom","feedItemContent","searchField","marginLeft","FeedItem","classes","item","proxy","show","React","useState","ogImage","setOgImage","useEffect","link","ogParser","err","data","console","og","image","url","rtf","Intl","RelativeTimeFormat","numeric","hourDiff","Math","abs","Date","now","isoDate","getTime","pubDate","format","floor","shortenedContent","contentSnippet","replace","Card","className","style","raised","onClick","window","open","CardActionArea","CardMedia","component","src","alt","title","Skeleton","variant","CardHeader","subheader","CardContent","Typography","color","FeedPreview","props","feed","setFeed","filter","setFilter","isLoading","setIsLoading","isError","setIsError","RssParser","parser","loadFeedCallback","useCallback","parseURL","then","catch","finally","CircularProgress","Button","TextField","label","value","onChange","e","target","InputProps","endAdornment","InputAdornment","position","items","map","key","guid","length","toLowerCase","indexOf","overflowX","App","Boolean","location","hostname","match","createMuiTheme","palette","type","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c435dcc2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Theme, createStyles } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport RssParser from 'rss-parser';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardActionArea,\r\n    CardContent,\r\n    CardHeader,\r\n    CardMedia,\r\n    CircularProgress,\r\n    InputAdornment,\r\n    TextField,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport ogParser from 'og-parser';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100vw',\r\n            marginTop: theme.spacing(2),\r\n        },\r\n        flexCenter: {\r\n            height: '100vh',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        error: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n\r\n            '& button': {\r\n                marginTop: theme.spacing(3),\r\n            },\r\n        },\r\n\r\n        feedItem: {\r\n            margin: 'auto',\r\n            marginBottom: theme.spacing(2),\r\n            width: '90%',\r\n        },\r\n        feedItemContent: {\r\n            display: 'flex',\r\n        },\r\n\r\n        searchField: {\r\n            width: '90%',\r\n            marginLeft: '5%',\r\n            marginBottom: theme.spacing(3),\r\n        },\r\n    })\r\n);\r\n\r\ninterface FeedItemProps {\r\n    classes: ReturnType<typeof useStyles>;\r\n    item: RssParser.Item;\r\n    proxy?: string;\r\n    show: boolean;\r\n}\r\nconst FeedItem = ({ classes, item, proxy, show }: FeedItemProps) => {\r\n    const imageWidth = 355;\r\n    const [ogImage, setOgImage] = React.useState<string>();\r\n    React.useEffect(() => {\r\n        if (!item.link) return;\r\n        ogParser(proxy + item.link, (err, data) => {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            setOgImage(data?.og?.image?.url);\r\n        });\r\n    }, [item.link, proxy]);\r\n\r\n    const rtf = new Intl.RelativeTimeFormat('pl', { numeric: 'auto' });\r\n    const hourDiff = Math.abs(Date.now() - new Date(item.isoDate || 0).getTime()) / (36e5 * -1);\r\n    const pubDate = rtf.format(Math.floor(hourDiff), 'hour');\r\n\r\n    const shortenedContent = item.contentSnippet?.replace(/^(.{210}[^\\s]*).*/s, '$1');\r\n\r\n    const cardClickHandler = () => window.open(item.link, '_blank');\r\n\r\n    return (\r\n        <Card\r\n            className={classes.feedItem}\r\n            style={{\r\n                display: show ? 'block' : 'none',\r\n            }}\r\n            raised\r\n            onClick={cardClickHandler}\r\n        >\r\n            <CardActionArea className={classes.feedItemContent}>\r\n                <CardMedia\r\n                    component={() =>\r\n                        ogImage ? (\r\n                            <img\r\n                                src={ogImage}\r\n                                alt={item.title}\r\n                                width={imageWidth}\r\n                                height={imageWidth * (2 / 3)}\r\n                            />\r\n                        ) : (\r\n                            <Skeleton\r\n                                variant='rect'\r\n                                width={imageWidth}\r\n                                height={imageWidth * (2 / 3)}\r\n                            />\r\n                        )\r\n                    }\r\n                />\r\n                <div style={{ width: `calc(100% - ${imageWidth}px)` }}>\r\n                    <CardHeader title={item.title} subheader={pubDate} />\r\n                    <CardContent>\r\n                        <Typography variant='body2' color='textSecondary'>\r\n                            {shortenedContent} ...\r\n                        </Typography>\r\n                    </CardContent>\r\n                </div>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n};\r\n\r\ninterface Props {\r\n    url: string;\r\n    proxy?: string;\r\n}\r\n\r\nfunction FeedPreview(props: Props) {\r\n    const classes = useStyles();\r\n    const [feed, setFeed] = React.useState<RssParser.Output>();\r\n    const [filter, setFilter] = React.useState<string>('');\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(true);\r\n    const [isError, setIsError] = React.useState<boolean>(false);\r\n\r\n    const [parser] = React.useState<RssParser>(new RssParser());\r\n    const loadFeedCallback = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        setIsError(false);\r\n        parser\r\n            .parseURL((props.proxy || '') + props.url)\r\n            .then(setFeed)\r\n            .catch(() => setIsError(true))\r\n            .finally(() => setIsLoading(false));\r\n    }, [parser, props.proxy, props.url]);\r\n    React.useEffect(loadFeedCallback, [loadFeedCallback]);\r\n\r\n    if (isLoading || isError) {\r\n        return (\r\n            <div className={classes.flexCenter}>\r\n                {isLoading && <CircularProgress color='secondary' />}\r\n                {isError && (\r\n                    <div className={classes.error}>\r\n                        <Typography variant='h4'>Nie można załadować kanału</Typography>\r\n                        <Button variant='contained' color='secondary' onClick={loadFeedCallback}>\r\n                            Spróbuj ponownie\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n                className={classes.searchField}\r\n                label='Przeszukaj kanał'\r\n                variant='outlined'\r\n                value={filter}\r\n                onChange={(e) => setFilter(e.target.value)}\r\n                InputProps={{\r\n                    endAdornment: (\r\n                        <InputAdornment position='end'>\r\n                            <SearchIcon />\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n\r\n            {feed?.items?.map((item) => (\r\n                <FeedItem\r\n                    key={item.guid}\r\n                    show={\r\n                        filter.length === 0 ||\r\n                        item.title?.toLowerCase()?.indexOf(filter.toLowerCase()) !== -1\r\n                    }\r\n                    {...{ classes, item, proxy: props.proxy }}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FeedPreview;\r\n","import React from 'react';\r\nimport { Theme, createStyles } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport FeedPreview from './components/FeedPreview';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            overflowX: 'hidden',\r\n            width: '100vw',\r\n            height: '100vh',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n        },\r\n    })\r\n);\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <FeedPreview\r\n                url='https://www.gamespot.com/feeds/mashup/'\r\n                // Proxy is optional (url will be appended at end of proxy url)\r\n                proxy='https://thingproxy.freeboard.io/fetch/'\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        // primary: { main: '#3F51B5' },\r\n        // secondary: { main: '#448AFF' },\r\n        // background: {\r\n        //     default: '#0f1633',\r\n        //     paper: '#151f47',\r\n        // },\r\n    },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Normalize } from 'styled-normalize';\r\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\r\nimport theme from './constants/theme';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Normalize />\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <App />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}